{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"FileOSNinja","text":""},{"location":"#installing-package","title":"Installing package","text":"<pre><code>pip install fileosninja\n</code></pre>"},{"location":"#file_manager","title":"file_manager","text":"<p>The File Manager provides user-friendly functions for performing operations on a file. While it is suitable for handling a few operations on a file, when dealing with a more extensive set of operations, it is advisable to employ the FileHandler. Serving as the class representation of the File Manager, the FileHandler proves to be convenient when executing multiple operations on a single file.</p> <p>We can import 'file_manager' from 'fileosninja' in the following manner:</p> <pre><code>from fileosninja import file_manager\n</code></pre>"},{"location":"#read_file","title":"read_file","text":"<p>This method reads the contents of a file and returns the content as a string.</p> <p>Parameters:</p> <ul> <li><code>filename</code> (str): The name or path of the file to be read.</li> </ul> <p>Returns:</p> <ul> <li>str: The content of the file as a string.</li> </ul> <pre><code>filename = \"path/to/file/file.txt\"\nfile_manager.read_file(filename)\n</code></pre>"},{"location":"#write_file","title":"write_file","text":"<p>Creates a new file or appends content to an existing file with the specified filename.</p> <p>Parameters:</p> <ul> <li><code>filename</code> (str): The name or path of the file to be created or appended to.</li> <li><code>content</code> (str, optional): The content to be written to the file.</li> <li><code>append</code> (bool, optional): If True, appends content to an existing file; if False, overwrites the file. Default value is <code>True</code></li> </ul> <p>Appending to a file or creating an new file. <pre><code>file_path = \"path/to/file/file.txt\"\ncontent = \"this is file content\"\nfile_manager.write_file(file_path, content=content)\n</code></pre></p> <p>Writing multiple lines <pre><code>file_path = \"path/to/file/file.txt\"\nfile_content = '''This is line 1.\nThis is line 2.\nThis is line 3.'''\nfile_manager.write_file(file_path, content=file_content)\n</code></pre></p> <p>Overwriting content in a file <pre><code>file_path = \"path/to/file/file.txt\"\ncontent = \"this is file content\"\nfile_manager.write_file(file_path, content=content, append=False)\n</code></pre></p>"},{"location":"#move_file","title":"move_file","text":"<p>Moves a file to a new folder.</p> <p>Parameters:</p> <ul> <li><code>file_path</code> (str): The path to the file to be moved.</li> <li><code>new_folder</code> (str): The path to the destination folder where the file will be moved.</li> </ul> <p><code>Note if the new folder does not exist, it will be created.</code> <pre><code>file_path = \"folder/myfile.txt\"\nnew_folder = \"new_folder/folder1/\"\nmove_file(file_path, new_folder)\n</code></pre></p>"},{"location":"#classesfile_handler","title":"classes.file_handler","text":"<p>This is a class representation of file_manager. File Handler should be used when we have to do multiple operations on the same file and we don't want to write the name of the file again and again.</p>"},{"location":"#filehandler","title":"FileHandler","text":"<p>Initialize a FileHandler object.</p> <p>Parameters:</p> <ul> <li><code>filename</code> (str): The name of the file to be handled.</li> <li><code>append</code> (bool, optional): A flag indicating whether to append to an existing file  (default is True). If False, the file will be truncated.</li> </ul> <pre><code>'''\nNote:\n    If `append` is not provided or set to True, any content written to the file will be appended.\n    If `append` is set to False, new content will overwrite existing content.\n'''\nfile = FileHandler(\"example.txt\", append=False) \n</code></pre>"},{"location":"#set_append_mode","title":"set_append_mode","text":"<p>Sets the append mode of the file.</p> <p>Parameters</p> <ul> <li><code>new_append_mode</code> (bool): The new append mode. Set to <code>True</code> for append mode (content will be added to the end of the file), or <code>False</code> for overwrite mode (existing content will be replaced).</li> </ul> <p>Usage: <pre><code>file = FileHandler(\"example.txt\", append=True)\nfile.set_append_mode(False)\n</code></pre></p>"},{"location":"#read_file_1","title":"read_file","text":"<p>Read the contents of the file associated with this <code>FileHandler</code> instance.</p> <p>Returns</p> <ul> <li><code>str</code>: The content of the file.</li> </ul> <p>Usage <pre><code>file = FileHandler(\"example.txt\", append=True)\nfile_content = file.read_file()\n</code></pre></p>"},{"location":"#write_file_1","title":"write_file","text":"<p>Write content to the file associated with this <code>FileHandler</code> instance.</p> <p>Parameters</p> <ul> <li><code>content</code> (str, optional): The content to be written to the file. Default is an empty string.</li> </ul> <p>Usage <pre><code>file = FileHandler(\"example.txt\", append=True)\nfile.write_file(\"This is some content.\")\n</code></pre></p>"},{"location":"#move_file_1","title":"move_file","text":"<p>Move the file associated with this <code>FileHandler</code> instance to a new location.</p> <p>Parameters</p> <ul> <li><code>new_location</code> (str): The path to the new location for the file.</li> </ul> <p>Usage <pre><code>file = FileHandler(\"example.txt\", append=True)\nfile.move_file(\"/new/directory/\")\n</code></pre></p>"},{"location":"#utils","title":"utils","text":""},{"location":"#print_directory","title":"print_directory","text":"<p>Print the structure of a folder to the given depth.</p> <p>Parameters:</p> <ul> <li><code>folder_path</code> (str): The name or path of the folder to display the structure of</li> <li><code>depth</code> (int, optional): The depth at which to display the structure of (default depth is 3)</li> </ul> <p>Returns: None</p> <pre><code>from fileosninja.utils import print_directory\n\nprint_directory(\"root/\", depth=3)\n</code></pre> <p>Output: <pre><code>root\n|-- child1\n|   |-- file1.txt\n|   |-- file2.txt\n|-- child2\n|   |-- child2_1\n|   |-- child2_2\n|       |-- child1.txt\n|-- testfile.txt\n</code></pre></p>"}]}